{"version":3,"sources":["api/PokemonApi.ts","components/PokemonCard.tsx","components/SearchForm.tsx","constants/searchform.ts","App.tsx","constants/general.ts","index.tsx"],"names":["PokemonCard","props","index","pokemon","className","alt","name","src","image","number","types","join","SearchForm","searchPokemonByName","pokemonInput","useRef","ifEnterPressed","event","keyCode","preventDefault","Form","onSubmit","Group","controlId","Label","Control","ref","type","placeholder","onKeyDown","Button","variant","onClick","App","GET_POKEMON_INFO","amount","useState","pokemonSearchCount","setPokemonSearchCount","pokemonName","setPokemonName","length","gql","useQuery","data","loading","error","apiStatusClassNames","classnames","useEffect","handleScroll","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","pageYOffset","addEventListener","removeEventListener","current","value","pokemons","map","random","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.04c5dec4.chunk.js","sourcesContent":["// GraphQL\nimport gql from 'graphql-tag';\n\n/**\n * Search through the GraphQL database and find Pokemons by the Amount given.\n *\n * @param {number} amount\n * @returns {data: string; loading: string; error: string;}\n */\nexport const getPokemonGQLByAmount = (amount: number) => {\n  return gql`\n    {\n      pokemons(first: ${amount}) {\n        id\n        number\n        name\n        image\n        types\n        evolutions {\n          id\n          number\n          name\n          image\n        }\n      }\n    }\n  `;\n};\n\n/**\n * Search through the GraphQL database and find a Pokemon by its Name.\n *\n * @param {string} name\n * @returns {data: string; loading: string; error: string;}\n */\nexport const getPokemonGQLByName = (name: string) => {\n  return gql`\n    {\n      pokemon(name: \"${name}\") {\n        id\n        number\n        name\n        image\n        types\n        evolutions {\n          id\n          number\n          name\n          image\n        }\n      }\n    }\n  `;\n};\n","// React\nimport React from 'react';\n\n// CSS\nimport './PokemonCard.scss';\n\ninterface PokemonCardProps {\n  pokemon: {\n    number: string;\n    name: string;\n    image: string;\n    types: [];\n  };\n  index: string;\n}\n\nconst PokemonCard: React.FC<PokemonCardProps> = props => {\n  const { index, pokemon } = props;\n\n  return (\n    <div key={index} className=\"PokemonCard\">\n      <img\n        className=\"PokemonCard__image\"\n        alt={`${pokemon.name}`}\n        src={pokemon.image}\n      />\n      <div className=\"PokemonCard__body\">\n        <div className=\"PokemonCard__body--content\">\n          <span className=\"PokemonCard__body--pokemonName\">\n            {pokemon.number} - {pokemon.name}\n          </span>\n          <span className=\"PokemonCard__body--pokemonType\">\n            {pokemon.types.join(', ')}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonCard;\n","// React\nimport React, { useRef } from 'react';\n\n// Bootstrap\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// CSS\nimport './SearchForm.scss';\n\n// Constants\nimport { SEARCH_LABEL, ENTER_POKEMON, SEARCH } from '../constants/searchform';\n\ninterface SearchFormProps {\n  searchPokemonByName: Function;\n}\n\nconst SearchForm: React.FC<SearchFormProps> = props => {\n  const { searchPokemonByName } = props;\n\n  const pokemonInput = useRef(null);\n\n  const ifEnterPressed = (event: any) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      searchPokemonByName(pokemonInput);\n    }\n  };\n\n  return (\n    <div className=\"SearchForm\">\n      <Form\n        onSubmit={(event: any) => {\n          ifEnterPressed(event);\n        }}\n      >\n        <Form.Group controlId=\"searchPokemonForm\">\n          <Form.Label>{SEARCH_LABEL}</Form.Label>\n          <Form.Control\n            ref={pokemonInput}\n            type=\"text\"\n            placeholder={ENTER_POKEMON}\n            onKeyDown={(event: any) => {\n              ifEnterPressed(event);\n            }}\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            searchPokemonByName(pokemonInput);\n          }}\n        >\n          {SEARCH}\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","export const SEARCH_LABEL = 'Search for your favorite Pokemon.';\nexport const ENTER_POKEMON = 'Enter Pokemon...';\nexport const SEARCH = 'Search';\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// Apollo\nimport { useQuery } from '@apollo/react-hooks';\n\n// Api\nimport { getPokemonGQLByAmount, getPokemonGQLByName } from './api/PokemonApi';\n\n// External\nimport classnames from 'classnames';\n\n// CSS\nimport './App.scss';\n\n// Components\nimport PokemonCard from './components/PokemonCard';\nimport SearchForm from './components/SearchForm';\n\n// Constants\nimport { LOADING, ERROR } from './constants/general';\nconst App: React.FC = () => {\n  const [pokemonSearchCount, setPokemonSearchCount] = useState(10);\n  const [pokemonName, setPokemonName] = useState('');\n\n  let GET_POKEMON_INFO;\n\n  if (pokemonName.length !== 0)\n    GET_POKEMON_INFO = getPokemonGQLByName(pokemonName);\n  else GET_POKEMON_INFO = getPokemonGQLByAmount(pokemonSearchCount);\n\n  const { data, loading, error } = useQuery(GET_POKEMON_INFO);\n\n  const apiStatusClassNames = classnames('PokemonOverview__apiStatus', {\n    'PokemonOverview__apiStatus--error':\n      error || (data && data.pokemon === null),\n  });\n\n  useEffect(() => {\n    /**\n     * This function will make a new API call when the bottom of the page is reached\n     *\n     * @param {void}\n     * @returns {void}\n     */\n    const handleScroll = () => {\n      const windowHeight =\n        'innerHeight' in window\n          ? window.innerHeight\n          : document.documentElement.offsetHeight;\n\n      const body = document.body;\n      const html = document.documentElement;\n\n      const docHeight = Math.max(\n        body.scrollHeight,\n        body.offsetHeight,\n        html.clientHeight,\n        html.scrollHeight,\n        html.offsetHeight,\n      );\n      const windowBottom = windowHeight + window.pageYOffset;\n\n      if (windowBottom >= docHeight) {\n        setPokemonSearchCount(pokemonSearchCount + 10);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return function cleanup() {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [pokemonSearchCount]);\n\n  /**\n   * Search for a specific Pokemon bu it's Name.\n   *\n   * @param pokemonInput\n   * @returns {void}\n   */\n  const searchPokemonByName = (pokemonInput: {\n    current: {\n      value: string;\n    };\n  }) => {\n    if (pokemonInput.current && pokemonInput.current.value) {\n      setPokemonName(pokemonInput.current.value);\n    }\n  };\n\n  return (\n    <div className=\"PokemonOverview\">\n      <div className=\"PokemonOverview__searchform\">\n        <SearchForm searchPokemonByName={searchPokemonByName} />\n      </div>\n\n      {(loading || error || (data && data.pokemon === null)) && (\n        <div className={apiStatusClassNames}>\n          {loading && <p>{LOADING}</p>}\n          {error ||\n            (data && data.pokemon === null && (\n              <p className=\"PokemonOverview__apiStatus--paragraph\">{ERROR}</p>\n            ))}\n        </div>\n      )}\n\n      <div className=\"PokemonOverview__pokemons\">\n        {data &&\n          data.pokemons &&\n          // @ts-ignore\n          data.pokemons.map((pokemon: any, index: string) => (\n            <PokemonCard\n              key={Math.random()}\n              index={index}\n              pokemon={pokemon}\n            ></PokemonCard>\n          ))}\n\n        {data && data.pokemon && (\n          <PokemonCard\n            key={Math.random()}\n            index={'0'}\n            pokemon={data.pokemon}\n          ></PokemonCard>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const HEADER_TEXT = 'PokeDex';\n\nexport const LOADING = 'Loading...';\nexport const ERROR =\n  'Something went wrong trying to find this Pokemon, Please try again.';\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss';\n\n// Main App\nimport App from './App';\n\n// Apollo\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://graphql-pokemon.now.sh/',\n});\n\nconst client = new ApolloClient({\n  cache,\n  link,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}